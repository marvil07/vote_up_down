<?php
/* $Id$ */

/**
 * @file
 * vote_up_down is a module that adds a widget for +1/-1 votes on nodes.
 * It depends upon Voting API.
 * It's based upon "simplevote.module".
 */

/**
 * Implementation of hook_help().
 */
function vote_up_down_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Adds a up/down vote widget to selected node types.');
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function vote_up_down_perm() {
  return array ('view up-down vote', 'use up-down vote', 'administer up-down vote');
}

/**
 * Implementation of hook_settings().
 */
function vote_up_down_settings() {

  $form['vote_node_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node types'),
    '#description' => t('Set the node types you want to activate voting on.'),
  );
  $form['vote_node_types']['vote_up_down_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Types'),
    '#default_value' => variable_get('vote_up_down_node_types', array()),
    '#options' => node_get_types(),
  );

  $form['vote_widget_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Widget settings'),
    '#description' => t('For more control over the voting widget placement it can be inserted directly in the theme, see the included node-storylink.tpl.php for an example. When this metod is used turn off the widget display here.'),
  );
  $form['vote_widget_settings']['vote_up_down_widget_teaser'] = array(
    '#type' => 'radios',
    '#title' => t('Vote widget display for teaser view'),
    '#default_value' => variable_get('vote_up_down_widget_teaser', 1),
    '#options' => array(0 => t('Do not display widget'), 1 => t('Display widget')),
  );
  $form['vote_widget_settings']['vote_up_down_widget_page'] = array(
    '#type' => 'radios',
    '#title' => t('Vote widget display for full-page view'),
    '#default_value' => variable_get('vote_up_down_widget_page', 1),
    '#options' => array(0 => t('Do not display widget'), 1 => t('Display widget')),
  );
  $form['vote_widget_settings']['vote_up_down_widget_comment'] = array(
    '#type' => 'radios',
    '#title' => t('Vote widget display for comments'),
    '#default_value' => variable_get('vote_up_down_widget_comment', 1),
    '#options' => array(0 => t('Do not display widget'), 1 => t('Display widget')),
  );

  $form['link_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Link display settings'),
  );
  $form['link_settings']['vote_up_down_link_teaser'] = array(
    '#type' => 'radios',
    '#title' => t('Link display of vote pints for teaser view'),
    '#default_value' => variable_get('vote_up_down_link_teaser', 1),
    '#options' => array(0 => t('Do not display link'), 1 => t('Display link')),
  );
  $form['link_settings']['vote_up_down_link_page'] = array(
    '#type' => 'radios',
    '#title' => t('Link display of vote pints for full-page view'),
    '#default_value' => variable_get('vote_up_down_link_page', 1),
    '#options' => array(0 => t('Do not display link'), 1 => t('Display link')),
  );
  $form['link_settings']['vote_up_down_link_comment'] = array(
    '#type' => 'radios',
    '#title' => t('Link display of vote pints for comments'),
    '#default_value' => variable_get('vote_up_down_link_comment', 1),
    '#options' => array(0 => t('Do not display link'), 1 => t('Display link')),
  );


  return $form;
}

/**
 * Implementation of hook_menu().
 */
function vote_up_down_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'vote_up_down',
      'title' => t('vote on content'),
      'callback' => 'vote_up_down_vote',
      'access' => user_access('use up-down vote'),
      'type' => MENU_CALLBACK
    );
    $items[] = array(
      'path' => 'ajax_vote_up_down',
      'title' => t('vote on content (ajax)'),
      'callback' => 'vote_up_down_ajax_handler',
      'access' => user_access('use up-down vote'),
      'type' => MENU_CALLBACK
    );
  }
  else {
    $items[] = array(
      'path' => 'admin/vote_up_down',
      'title' => t('vote up/down'),
      'callback' => 'vote_up_down_page',
      'access' => user_access('administer up-down vote'),
    );
    $items[] = array(
      'path' => 'admin/vote_up_down/user_votes',
      'title' => t('user votes'),
      'callback' => 'vote_up_down_page',
      'access' => user_access('administer up-down vote'),
    );
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      $vote_access = (user_access('administer up-down vote') && in_array($node->type, variable_get('vote_up_down_node_types', array()), TRUE));
      $items[] = array(
        'path' => 'node/'. arg(1) .'/votes',
        'title' => t('votes'),
        'callback' => 'vote_up_down_tracker',
        'access' => $vote_access,
        'weight' => 5,
        'type' => MENU_LOCAL_TASK
      );
    }

    theme_add_style(drupal_get_path('module', 'vote_up_down') . '/vote_up_down.css');
    drupal_add_js(drupal_get_path('module', 'vote_up_down') . '/ajax_vote_up_down.js');
  }

  return $items;
}

/*
 * Menu callback; Handles admin/vote_up_down and subpages.
 */
function vote_up_down_page() {
  $op = arg(2);

  switch ($op) {
    case 'user_votes':
      $output = vote_up_down_user_votes();
      break;
    default:
      $output = '<h3>Vote up/down statistics</h3><ul><li>';
      $output .= l(t('user votes'), 'admin/vote_up_down/user_votes');
      $output .= '</li></ul>';
  }

  return $output;
}

/*
 * Users votes page for the vote_up_down data
 */
function vote_up_down_user_votes() {
  $sql = "SELECT COUNT(v.value) AS number_votes, SUM(v.value) AS total_votes, v.uid, v.tag, u.uid, u.name FROM {votingapi_vote} v left join {users} u on v.uid = u.uid WHERE v.tag = 'vote' GROUP BY u.name";
  $sql_cnt = "SELECT COUNT(DISTINCT(uid)) FROM {votingapi_vote}";
  $header = array(
    array('data' => t('User'), 'field' => 'u.name'),
    array('data' => t('Votes'), 'field' => 'number_votes', 'sort' => 'desc'),
    array('data' => t('Vote sum'), 'field' => 'total_votes'),
  );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 30, 0, $sql_cnt);
  while ($vote = db_fetch_object($result)) {
    $rows[] = array(
      theme('username', $vote),
      $vote->number_votes,
      $vote->total_votes
    );
  }
  drupal_set_title(t('user votes'));
  $output = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 30, 0);

  return $output;
}

/*
 * Menu callback; display all votes for a node.
 */
function vote_up_down_tracker() {
  if ($node = node_load(arg(1))) {
    $header = array(
      array('data' => t('User')),
      array('data' => t('Vote')),
      array('data' => t('Date'))
    );
    $votes = votingapi_get_content_votes('node', $node->nid);
    foreach ($votes as $vote) {
      $account = user_load(array('uid' => $vote[0]->uid, 'status' => 1));
      $rows[] = array(
        theme('username', $account),
        $vote[0]->value,
        array('data' => format_date($vote[0]->timestamp, 'small'), 'class' => 'nowrap')
      );
    }
    drupal_set_title(check_plain($node->title));
    $output = theme('table', $header, $rows);
    $output .= theme('pager', NULL, 30);

    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implementation of hook_link().
 */
function vote_up_down_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();


  switch ($type) {
    case 'node':
      $node_type = in_array($node->type, variable_get('vote_up_down_node_types', array()), TRUE);
      if ($node_type && user_access('view up-down vote')) {
        if ($teaser && variable_get('vote_up_down_link_teaser', 1)) {
          $links[] = _vote_up_down_points($node->nid, $type);
        }
        elseif (variable_get('vote_up_down_link_page', 1)) {
          $links[] = _vote_up_down_points($node->nid, $type);
        }
      }
      break;
    case 'comment':
      if (user_access('view up-down vote') && variable_get('vote_up_down_link_comment', 1)) {
          $links[] = _vote_up_down_points($node->cid, $type);
      }
      break;
  }

  return $links;
}

function vote_up_down_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'view':
      $node_type = in_array($node->type, variable_get('vote_up_down_node_types', array()), TRUE);
      if ($node_type) {
        if($teaser && variable_get('vote_up_down_widget_teaser', 1) == 1){
          $node->teaser = theme('vote_up_down_widget', $node->nid, 'node') . $node->teaser;
        }
        elseif (variable_get('vote_up_down_widget_page', 1) == 1) {
          $node->body = theme('vote_up_down_widget', $node->nid, 'node') . $node->body;
        }
      }
      break;
  }
}

function vote_up_down_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      if (variable_get('vote_up_down_widget_comment', 1)) {
        $comment->comment = theme('vote_up_down_widget', $comment->cid, 'comment') . $comment->comment;
      }
      break;
  }
}

function vote_up_down_vote($type, $cid, $value) {
  // sanity-check the incoming values.
  if (is_numeric($cid) && is_numeric($value)) {
    if ($value > 0) {
      $vote->value = 1;
    }
    else {
      $vote->value = -1;
    }

    $vote->value_type = 'points';
    $vote->tag = 'vote';

    votingapi_set_vote($type, $cid, $vote);
  }

  drupal_goto(drupal_get_destination());
}

/**
 * An ajax voting get handler
 *
 * Params passed by url:
 * @param $type
 *   A string identifying the type of content whose votes are being retrieved. Node, comment, aggregator item, etc.
 * @param $tag
 *   Tag defining vote criteria.
 * @param $id
 *   Element (node, comment) id.
 * @param $score
 *   Score of the vote cast.
 * @return
 *   String containing an Updated score (via print)
 */
function vote_up_down_ajax_handler($type, $cid, $value) {
  // sanity-check the incoming values.
  if (is_numeric($cid) && is_numeric($value)) {
    if ($value > 0) {
      $vote->value = 1;
    }
    else {
      $vote->value = -1;
    }

    $vote->value_type = 'points';
    $vote->tag = 'vote';

    votingapi_set_vote($type, $cid, $vote);
  }

  // send the results back
  print _vote_up_down_points($cid, $type);

  exit();
}

function theme_vote_up_down_widget($cid, $type) {
  global $user;

  if (user_access('view up-down vote')) {

    $output = '<div class="vote-up-down-widget">';

    if (user_access('use up-down vote') && $user->uid) {
      $user_vote = votingapi_get_user_votes($type, $cid);

      if ($user_vote[0]->value > 0) {
        $class = 'vote-up-act';
        $class2 = 'vote-down-inact';
      }
      else if ($user_vote[0]->value < 0) {
        $class = 'vote-up-inact';
        $class2 = 'vote-down-act';
      }
      else {
        $class = 'vote-up-inact';
        $class2 = 'vote-down-inact';
      }

      $output .= '<span id="vote_up_'. $cid .'" class="'. $class .'" title="'. url("ajax_vote_up_down/$type/$cid/1") .'">'. l('', "vote_up_down/$type/$cid/1", array('class' => $class, 'title' => t('Vote up')), drupal_get_destination(), NULL, FALSE, TRUE) .'</span>';
      $output .= '<span id="vote_down_'. $cid .'" class="'. $class2 .'" title="'. url("ajax_vote_up_down/$type/$cid/0") .'">'. l('', "vote_up_down/$type/$cid/0", array('class' => $class2, 'title' => t('Vote down')), drupal_get_destination(), NULL, FALSE, TRUE) .'</span>';
    }
    else {
      $output .= '<span class="up-inact" title="'. t('You must login to vote.') .'"></span>';
      $output .= '<span class="down-inact" title="'. t('You must login to vote.') .'"></span>';
    }

    $output .= '</div>';

    return $output;
  }
}

function _vote_up_down_points($cid, $type) {
  $vote_result = votingapi_get_voting_result($type, $cid, 'points', 'vote', 'sum');
  if ($vote_result) {
    $output = '<span id="vote_points_'. $cid .'" class="vote-points">'. format_plural($vote_result->value, '1 point', '%count points') .'</span>';
  }
  else {
    $output = '<span id="vote_points_'. $cid .'" class="vote-points">'. t('0 points') .'</span>';
  }

  return $output;
}

?>